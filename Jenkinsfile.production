def gitCredentialsId = "github-token"
def awsCredentialsId = "aws-credentials"
def githubHost = "github.com"
def githubRepo = "PhamMinhHiepIT2/max-weather-iac"
def githubBranch = "main"
def awsRegion = "ap-southeast-2"
def codeFolder = "max-weather-iac"
def ecrHost = "972709131469.dkr.ecr.ap-southeast-2.amazonaws.com"
def ecrRepo = "max-weather-dev"
def imageName = "972709131469.dkr.ecr.ap-southeast-2.amazonaws.com/max-weather-dev"
def eksCluster = "max-weather-dev"
def kustomizePath = "k8s/kustomize/overlays/weather-api/production"

node('built-in') {
    stage('Checkout') {
        checkout(githubHost, gitCredentialsId, githubRepo, githubBranch, codeFolder)
    }

    stage('Verify') {
        def imageTag = params.IMAGE_TAG.trim()
        verify(ecrRepo, imageTag, awsCredentialsId, awsRegion)
    }

    stage('Deploy') {
        def imageTag = params.IMAGE_TAG.trim()
        deploy(imageTag, awsCredentialsId, awsRegion, eksCluster, codeFolder, kustomizePath)
    }
}

def checkout(githubHost, githubCredentialsId, githubRepo, githubBranch, folder) {
    withCredentials([usernamePassword(
        credentialsId: githubCredentialsId,
        usernameVariable: "GITHUB_USERNAME",
        passwordVariable: "GITHUB_TOKEN"
    )]) {
        def githubUri = "https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@${githubHost}/${githubRepo}.git"
        sh """
            if [ ! -d ${folder} ]; then
                git clone -b ${githubBranch} ${githubUri} ${folder}
            else 
                cd ${folder}
                git fetch origin ${githubBranch}
                git reset --hard origin/${githubBranch}
            fi
        """
    }
}

def verify(ecrRepo, imageTag, awsCredentialsId, awsRegion) {
    withCredentials([usernamePassword(
        credentialsId: awsCredentialsId,
        usernameVariable: "AWS_ACCESS_KEY_ID",
        passwordVariable: "AWS_SECRET_ACCESS_KEY"
    )]) {
        def exists = sh(
            script: """
                aws ecr describe-images \
                    --repository-name ${ecrRepo} \
                    --region ${awsRegion} \
                    --image-ids imageTag=${imageTag} > /dev/null 2>&1
            """,
            returnStatus: true
        )
        if (exists != 0) {
            error "❌ Image tag: ${imageTag} not found in ECR. Aborting deployment."
        } else {
            echo "✅ Image tag: ${imageTag} exists in ECR."
        }
    }
}

def deploy(imageTag, awsCredentialsId, awsRegion, eksCluster, deployFolder, kustomizePath) {
    withCredentials([usernamePassword(
        credentialsId: awsCredentialsId,
        usernameVariable: "AWS_ACCESS_KEY_ID",
        passwordVariable: "AWS_SECRET_ACCESS_KEY"
    )]) {
        sh """
            cd ${deployFolder}
            yq -yi ".images[0].newTag = \\"${IMAGE_TAG}\\"" ${kustomizePath}/kustomization.yaml
            aws eks --region ${awsRegion} update-kubeconfig --name ${eksCluster}
            kubectl apply -k ${kustomizePath}
            git config user.name "jenkins"
            git config user.email "jenkins@max-weather.com"
            git add ${kustomizePath}/kustomization.yaml
            if git diff --cached --quiet; then
                echo "No changes detected. Skipping commit."
            else
                git commit -m "Update image tag to ${imageTag} in production"
                git push
            fi
        """
    } 
}
