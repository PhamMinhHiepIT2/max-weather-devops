def gitCredentialsId = "github-token"
def awsCredentialsId = "aws-credentials"
def githubHost = "github.com"
def githubRepo = "PhamMinhHiepIT2/max-weather-iac"
def githubBranch = "main"
def awsRegion = "ap-southeast-2"
def codeFolder = "max-weather-iac"
def appFolder    = "app"
def dockerfile = "Dockerfile"
def ecrHost = "972709131469.dkr.ecr.ap-southeast-2.amazonaws.com"
def imageName = "972709131469.dkr.ecr.ap-southeast-2.amazonaws.com/max-weather-dev"
def eksCluster = "max-weather-dev"
def kustomizePath = "k8s/kustomize/overlays/weather-api/staging"

node('built-in') {
    stage('Checkout') {
        checkout(githubHost, gitCredentialsId, githubRepo, githubBranch, codeFolder)
    }

    stage('Build') {
        def imageTag = params.IMAGE_TAG.trim()
        def image = imageName + ":" + imageTag
        def buildFolder = codeFolder + "/" + appFolder
        build(image, dockerfile, buildFolder)
    }

    stage('Push') {
        def imageTag = params.IMAGE_TAG.trim()
        def image = imageName + ":" + imageTag
        push(image, awsCredentialsId, awsRegion, ecrHost)
    }

    stage('Deploy') {
        def imageTag = params.IMAGE_TAG.trim()
        deploy(imageTag, awsCredentialsId, awsRegion, eksCluster, codeFolder, kustomizePath)
    }
}

def checkout(githubHost, githubCredentialsId, githubRepo, githubBranch, folder) {
    withCredentials([usernamePassword(
        credentialsId: githubCredentialsId,
        usernameVariable: "GITHUB_USERNAME",
        passwordVariable: "GITHUB_TOKEN"
    )]) {
        def githubUri = "https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@${githubHost}/${githubRepo}.git"
        sh """
            if [ ! -d ${folder} ]; then
                git clone -b ${githubBranch} ${githubUri} ${folder}
            else 
                cd ${folder}
                git fetch origin ${githubBranch}
                git reset --hard origin/${githubBranch}
            fi
        """
    }
}

def build(image, dockerfile, folder) {
    sh """
        cd ${folder}
        export DOCKER_BUILDKIT=0
        docker build -t ${image} -f ${dockerfile} .
    """
}

def push(image, awsCredentialsId, awsRegion, ecrHost) {
    withCredentials([usernamePassword(
        credentialsId: awsCredentialsId,
        usernameVariable: "AWS_ACCESS_KEY_ID",
        passwordVariable: "AWS_SECRET_ACCESS_KEY"
    )]) {
        sh """
            aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrHost}
            docker push ${image}
        """
    } 
}

def deploy(imageTag, awsCredentialsId, awsRegion, eksCluster, deployFolder, kustomizePath) {
    withCredentials([usernamePassword(
        credentialsId: awsCredentialsId,
        usernameVariable: "AWS_ACCESS_KEY_ID",
        passwordVariable: "AWS_SECRET_ACCESS_KEY"
    )]) {
        sh """
            cd ${deployFolder}
            yq -yi ".images[0].newTag = \\"${IMAGE_TAG}\\"" ${kustomizePath}/kustomization.yaml
            aws eks --region ${awsRegion} update-kubeconfig --name ${eksCluster}
            kubectl apply -k ${kustomizePath}
            git config user.name "jenkins"
            git config user.email "jenkins@max-weather.com"
            git add ${kustomizePath}/kustomization.yaml
            if git diff --cached --quiet; then
                echo "No changes detected. Skipping commit."
            else
                git commit -m "Update image tag to ${imageTag} in staging"
                git push
            fi
        """
    } 
}
